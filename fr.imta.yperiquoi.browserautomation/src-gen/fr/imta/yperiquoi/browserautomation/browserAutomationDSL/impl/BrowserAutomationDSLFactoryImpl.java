/**
 * generated by Xtext 2.32.0
 */
package fr.imta.yperiquoi.browserautomation.browserAutomationDSL.impl;

import fr.imta.yperiquoi.browserautomation.browserAutomationDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BrowserAutomationDSLFactoryImpl extends EFactoryImpl implements BrowserAutomationDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BrowserAutomationDSLFactory init()
  {
    try
    {
      BrowserAutomationDSLFactory theBrowserAutomationDSLFactory = (BrowserAutomationDSLFactory)EPackage.Registry.INSTANCE.getEFactory(BrowserAutomationDSLPackage.eNS_URI);
      if (theBrowserAutomationDSLFactory != null)
      {
        return theBrowserAutomationDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BrowserAutomationDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAutomationDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BrowserAutomationDSLPackage.MODEL: return createModel();
      case BrowserAutomationDSLPackage.COMMAND: return createCommand();
      case BrowserAutomationDSLPackage.OPEN_BROWSER: return createOpenBrowser();
      case BrowserAutomationDSLPackage.GO_TO: return createGoTo();
      case BrowserAutomationDSLPackage.CLICK: return createClick();
      case BrowserAutomationDSLPackage.FILL: return createFill();
      case BrowserAutomationDSLPackage.SELECT: return createSelect();
      case BrowserAutomationDSLPackage.VERIFY: return createVerify();
      case BrowserAutomationDSLPackage.READ: return createRead();
      case BrowserAutomationDSLPackage.PASTE: return createPaste();
      case BrowserAutomationDSLPackage.UNCHECK: return createUncheck();
      case BrowserAutomationDSLPackage.COMBOBOX: return createCombobox();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenBrowser createOpenBrowser()
  {
    OpenBrowserImpl openBrowser = new OpenBrowserImpl();
    return openBrowser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GoTo createGoTo()
  {
    GoToImpl goTo = new GoToImpl();
    return goTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Click createClick()
  {
    ClickImpl click = new ClickImpl();
    return click;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fill createFill()
  {
    FillImpl fill = new FillImpl();
    return fill;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Verify createVerify()
  {
    VerifyImpl verify = new VerifyImpl();
    return verify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Read createRead()
  {
    ReadImpl read = new ReadImpl();
    return read;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Paste createPaste()
  {
    PasteImpl paste = new PasteImpl();
    return paste;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Uncheck createUncheck()
  {
    UncheckImpl uncheck = new UncheckImpl();
    return uncheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Combobox createCombobox()
  {
    ComboboxImpl combobox = new ComboboxImpl();
    return combobox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrowserAutomationDSLPackage getBrowserAutomationDSLPackage()
  {
    return (BrowserAutomationDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BrowserAutomationDSLPackage getPackage()
  {
    return BrowserAutomationDSLPackage.eINSTANCE;
  }

} //BrowserAutomationDSLFactoryImpl
